/**
 * @file update.cpp
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
// #define OUTPUT_DEBUG
#include "v0.hpp"

#include <string>

#include "mediafire_sdk/api/error.hpp"
#include "mediafire_sdk/api/ptree_helpers.hpp"
#include "mediafire_sdk/utils/string.hpp"
#include "mediafire_sdk/api/session_token_api_base.hpp"

#include "boost/property_tree/json_parser.hpp"

namespace v0 = mf::api::folder::update::v0;


namespace {
std::string AsString(const v0::Privacy & value)
{
    if (value == v0::Privacy::Public)
        return "public";
    if (value == v0::Privacy::Private)
        return "private";
    return mf::utils::to_string(static_cast<uint32_t>(value));
}
std::string AsString(const v0::PrivacyRecursive & value)
{
    if (value == v0::PrivacyRecursive::NonRecursive)
        return "no";
    if (value == v0::PrivacyRecursive::Recursive)
        return "yes";
    return mf::utils::to_string(static_cast<uint32_t>(value));
}
}  // namespace

#include "mediafire_sdk/api/type_helpers.hpp"

namespace mf {
namespace api {
/** API action path "folder" */
namespace folder {
namespace update {
namespace v0 {

const std::string api_path("/api/folder/update");

// Impl ------------------------------------------------------------------------

class Impl : public SessionTokenApiBase<Response>
{
public:
    explicit Impl(
            std::string folderkey
        );

    std::string folderkey_;
    boost::optional<std::string> foldername_;
    boost::optional<std::string> description_;
    boost::optional<Privacy> privacy_;
    boost::optional<PrivacyRecursive> privacy_recursive_;
    boost::optional<boost::posix_time::ptime> mtime_;
    virtual void BuildUrl(
        std::string * path,
        std::map<std::string, std::string> * query_parts
    ) const override;

    virtual void ParseResponse( Response * response ) override;

    mf::http::SharedBuffer::Pointer GetPostData();

    mf::api::RequestMethod GetRequestMethod() const
    {
        return mf::api::RequestMethod::Post;
    }
};

Impl::Impl(
        std::string folderkey
    ) :
    folderkey_(folderkey)
{
}

void Impl::BuildUrl(
            std::string * path,
            std::map<std::string, std::string> * query_parts
    ) const
{
    *path = api_path + ".php";
}

void Impl::ParseResponse( Response * response )
{
    // This function uses return defines for readability and maintainability.
#   define return_error(error_type, error_message)                             \
    {                                                                          \
        SetError(response, error_type, error_message);                         \
        return;                                                                \
    }
    response->asynchronous = Asynchronous::Synchronous;

    {
        std::string optval;
        // create_content_enum_parse TSingle
        if ( GetIfExists(
                response->pt,
                "response.asynchronous",
                &optval) )
        {
            if ( optval == "no" )
                response->asynchronous = Asynchronous::Synchronous;
            else if ( optval == "yes" )
                response->asynchronous = Asynchronous::Asynchronous;
        }
    }

    // create_content_parse_single optional no default
    {
        uint32_t optarg;
        if ( GetIfExists(
                response->pt,
                "response.device_revision",
                &optarg) )
        {
            response->device_revision = optarg;
        }
    }

#   undef return_error
}

mf::http::SharedBuffer::Pointer Impl::GetPostData()
{
    std::map<std::string, std::string> parts;

    parts["folder_key"] = folderkey_;
    if (foldername_)
        parts["foldername"] = *foldername_;
    if (description_)
        parts["description"] = *description_;
    if (privacy_)
        parts["privacy"] = AsString(*privacy_);
    if (privacy_recursive_)
        parts["privacy_recursive"] = AsString(*privacy_recursive_);
    if (mtime_)
        parts["mtime"] = AsString(*mtime_);

    std::string post_data = MakePost(api_path + ".php", parts);
    AddDebugText(" POST data: " + post_data + "\n");
    return mf::http::SharedBuffer::Create(post_data);
}

// Request ---------------------------------------------------------------------

Request::Request(
        std::string folderkey
    ) :
    impl_(new Impl(folderkey))
{
}

void Request::SetCallback( CallbackType callback_function )
{
    impl_->SetCallback(callback_function);
}

void Request::HandleContent(
        const std::string & url,
        const mf::http::Headers & headers,
        const std::string & content
    )
{
    impl_->HandleContent(url, headers, content);
}

void Request::HandleError(
        const std::string & url,
        std::error_code ec,
        const std::string & error_string
    )
{
    impl_->HandleError(url, ec, error_string);
}

std::string Request::Url(const std::string & hostname) const
{
    return impl_->Url(hostname);
}

void Request::SetSessionToken(
        std::string session_token,
        std::string time,
        int secret_key
    )
{
    impl_->SetSessionToken(session_token, time, secret_key);
}

void Request::SetFoldername(std::string foldername)
{
    impl_->foldername_ = foldername;
}

void Request::SetDescription(std::string description)
{
    impl_->description_ = description;
}

void Request::SetPrivacy(Privacy privacy)
{
    impl_->privacy_ = privacy;
}

void Request::SetPrivacyRecursive(PrivacyRecursive privacy_recursive)
{
    impl_->privacy_recursive_ = privacy_recursive;
}

void Request::SetMtime(boost::posix_time::ptime mtime)
{
    impl_->mtime_ = mtime;
}

mf::http::SharedBuffer::Pointer Request::GetPostData()
{
    return impl_->GetPostData();
}

}  // namespace v0
}  // namespace update
}  // namespace folder
}  // namespace api
}  // namespace mf
