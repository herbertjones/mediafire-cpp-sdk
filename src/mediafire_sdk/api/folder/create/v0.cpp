/**
 * @file create.cpp
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
// #define OUTPUT_DEBUG
#include "v0.hpp"

#include <string>

#include "mediafire_sdk/api/error.hpp"
#include "mediafire_sdk/api/ptree_helpers.hpp"
#include "mediafire_sdk/utils/string.hpp"
#include "mediafire_sdk/api/session_token_api_base.hpp"

#include "boost/property_tree/json_parser.hpp"

namespace v0 = mf::api::folder::create::v0;


namespace {
std::string AsString(const v0::OnNameCollision & value)
{
    if (value == v0::OnNameCollision::Rename)
        return "yes";
    if (value == v0::OnNameCollision::ReturnExistingFolderkey)
        return "no";
    return mf::utils::to_string(static_cast<uint32_t>(value));
}
}  // namespace

#include "mediafire_sdk/api/type_helpers.hpp"

namespace mf {
namespace api {
/** API action path "folder" */
namespace folder {
namespace create {
namespace v0 {

const std::string api_path("/api/folder/create");

// Impl ------------------------------------------------------------------------

class Impl : public SessionTokenApiBase<Response>
{
public:
    explicit Impl(
            std::string foldername
        );

    std::string foldername_;
    boost::optional<std::string> parent_folderkey_;
    boost::optional<boost::posix_time::ptime> mtime_;
    boost::optional<OnNameCollision> rename_on_name_collision_;
    virtual void BuildUrl(
        std::string * path,
        std::map<std::string, std::string> * query_parts
    ) const override;

    virtual void ParseResponse( Response * response ) override;

    mf::http::SharedBuffer::Pointer GetPostData();

    mf::api::RequestMethod GetRequestMethod() const
    {
        return mf::api::RequestMethod::Post;
    }
};

Impl::Impl(
        std::string foldername
    ) :
    foldername_(foldername)
{
}

void Impl::BuildUrl(
            std::string * path,
            std::map<std::string, std::string> * query_parts
    ) const
{
    *path = api_path + ".php";
}

void Impl::ParseResponse( Response * response )
{
    // This function uses return defines for readability and maintainability.
#   define return_error(error_type, error_message)                             \
    {                                                                          \
        SetError(response, error_type, error_message);                         \
        return;                                                                \
    }

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.folder_key",
            &response->folderkey ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.folder_key\"");

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.upload_key",
            &response->uploadkey ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.upload_key\"");

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.name",
            &response->name ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.name\"");

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.created",
            &response->created_datetime ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.created\"");

    {
        std::string optval;
        // create_content_enum_parse TSingle
        if ( GetIfExists(
                response->pt,
                "response.privacy",
                &optval) )
        {
            if ( optval == "public" )
                response->privacy = Privacy::Public;
            else if ( optval == "private" )
                response->privacy = Privacy::Private;
            else
                return_error(
                    mf::api::api_code::ContentInvalidData,
                    "invalid value in response.privacy");
        }
        else
            return_error(
                mf::api::api_code::ContentInvalidData,
                "no value in response.privacy");
    }

    // create_content_parse_single required
    if ( ! GetIfExists(
            response->pt,
            "response.revision",
            &response->revision ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.revision\"");

#   undef return_error
}

mf::http::SharedBuffer::Pointer Impl::GetPostData()
{
    std::map<std::string, std::string> parts;

    parts["foldername"] = foldername_;
    if (parent_folderkey_)
        parts["parent_key"] = *parent_folderkey_;
    if (mtime_)
        parts["mtime"] = AsString(*mtime_);
    if (rename_on_name_collision_)
        parts["allow_duplicate_name"] = AsString(*rename_on_name_collision_);

    std::string post_data = MakePost(api_path + ".php", parts);
    AddDebugText(" POST data: " + post_data + "\n");
    return mf::http::SharedBuffer::Create(post_data);
}

// Request ---------------------------------------------------------------------

Request::Request(
        std::string foldername
    ) :
    impl_(new Impl(foldername))
{
}

void Request::SetCallback( CallbackType callback_function )
{
    impl_->SetCallback(callback_function);
}

void Request::HandleContent(
        const std::string & url,
        const mf::http::Headers & headers,
        const std::string & content
    )
{
    impl_->HandleContent(url, headers, content);
}

void Request::HandleError(
        const std::string & url,
        std::error_code ec,
        const std::string & error_string
    )
{
    impl_->HandleError(url, ec, error_string);
}

std::string Request::Url(const std::string & hostname) const
{
    return impl_->Url(hostname);
}

void Request::SetSessionToken(
        std::string session_token,
        std::string time,
        int secret_key
    )
{
    impl_->SetSessionToken(session_token, time, secret_key);
}

void Request::SetParentFolderkey(std::string parent_folderkey)
{
    impl_->parent_folderkey_ = parent_folderkey;
}

void Request::SetMtime(boost::posix_time::ptime mtime)
{
    impl_->mtime_ = mtime;
}

void Request::SetRenameOnNameCollision(OnNameCollision rename_on_name_collision)
{
    impl_->rename_on_name_collision_ = rename_on_name_collision;
}

mf::http::SharedBuffer::Pointer Request::GetPostData()
{
    return impl_->GetPostData();
}

}  // namespace v0
}  // namespace create
}  // namespace folder
}  // namespace api
}  // namespace mf
