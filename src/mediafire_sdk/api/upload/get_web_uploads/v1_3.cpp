/**
 * @file get_web_uploads.cpp
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
// #define OUTPUT_DEBUG
#include "v1_3.hpp"

#include <string>

#include "mediafire_sdk/api/error.hpp"
#include "mediafire_sdk/api/ptree_helpers.hpp"
#include "mediafire_sdk/utils/string.hpp"
#include "mediafire_sdk/api/session_token_api_base.hpp"

#include "boost/property_tree/json_parser.hpp"

namespace v1_3 = mf::api::upload::get_web_uploads::v1_3;


namespace {
std::string AsString(const v1_3::Filter & value)
{
    if (value == v1_3::Filter::ActiveOnly)
        return "no";
    if (value == v1_3::Filter::ActiveAndInactive)
        return "yes";
    return mf::utils::to_string(static_cast<uint32_t>(value));
}
}  // namespace

#include "mediafire_sdk/api/type_helpers.hpp"

namespace {
// get_data_type_struct_extractor begin
using namespace v1_3;  // NOLINT
bool WebUploadFromPropertyBranch(
        Response * response,
        Response::WebUpload * value,
        const boost::property_tree::wptree & pt
    )
{
#   define return_error(error_type, error_message)                             \
    {                                                                          \
        response->error_code = make_error_code( error_type );                  \
        response->error_string = error_message;                                \
        return false;                                                          \
    }
    using mf::api::GetIfExists;
    using mf::api::GetValueIfExists;
    if (pt.size() == 0)  // Stop if branch is empty
        return false;
    value->status_code = Status::Unknown;
    value->status_text = "";
    value->error_code = 0;
    value->precent_complete = 0;

    // create_content_parse_single required
    if ( ! GetIfExists(
            pt,
            "uploadkey",
            &value->uploadkey ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"uploadkey\"");

    {
        std::string optval;
        // create_content_enum_parse TSingle
        if ( GetIfExists(
                pt,
                "active",
                &optval) )
        {
            if ( optval == "no" )
                value->activity = Activity::Inactive;
            else if ( optval == "yes" )
                value->activity = Activity::Active;
            else
                return_error(
                    mf::api::api_code::ContentInvalidData,
                    "invalid value in active");
        }
        else
            return_error(
                mf::api::api_code::ContentInvalidData,
                "no value in active");
    }

    // create_content_parse_single optional no default
    {
        std::string optarg;
        if ( GetIfExists(
                pt,
                "quickkey",
                &optarg) )
        {
            value->quickkey = optarg;
        }
    }

    // create_content_parse_single required
    if ( ! GetIfExists(
            pt,
            "filename",
            &value->filename ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"filename\"");

    // create_content_parse_single optional no default
    {
        boost::posix_time::ptime optarg;
        if ( GetIfExists(
                pt,
                "created",
                &optarg) )
        {
            value->created_datetime = optarg;
        }
    }

    {
        std::string optval;
        // create_content_enum_parse TSingle
        if ( GetIfExists(
                pt,
                "status_code",
                &optval) )
        {
            if ( optval == "" )
                value->status_code = Status::Unknown;
            else if ( optval == "1" )
                value->status_code = Status::Entered;
            else if ( optval == "2" )
                value->status_code = Status::Started;
            else if ( optval == "3" )
                value->status_code = Status::Transferring;
            else if ( optval == "4" )
                value->status_code = Status::Downloaded;
            else if ( optval == "5" )
                value->status_code = Status::VerificationWaiting;
            else if ( optval == "6" )
                value->status_code = Status::Verifying;
            else if ( optval == "99" )
                value->status_code = Status::Complete;
        }
    }

    // create_content_parse_single optional with default
    GetIfExists(
            pt,
            "status",
            &value->status_text);

    // create_content_parse_single optional with default
    GetIfExists(
            pt,
            "error_status",
            &value->error_code);

    // create_content_parse_single required
    if ( ! GetIfExists(
            pt,
            "url",
            &value->url ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"url\"");

    // create_content_parse_single required
    if ( ! GetIfExists(
            pt,
            "eta",
            &value->eta ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"eta\"");

    // create_content_parse_single optional no default
    {
        uint64_t optarg;
        if ( GetIfExists(
                pt,
                "size",
                &optarg) )
        {
            value->filesize = optarg;
        }
    }

    // create_content_parse_single optional with default
    GetIfExists(
            pt,
            "precent_complete",
            &value->precent_complete);

    // get_data_type_struct_extractor conclusion
    return true;
#   undef return_error
}
}  // namespace

namespace mf {
namespace api {
/** API action path "upload" */
namespace upload {
namespace get_web_uploads {
namespace v1_3 {

const std::string api_path("/api/1.3/upload/get_web_uploads");

// Impl ------------------------------------------------------------------------

class Impl : public SessionTokenApiBase<Response>
{
public:
    Impl();

    boost::optional<Filter> filter_;
    boost::optional<std::string> upload_key_;
    virtual void BuildUrl(
        std::string * path,
        std::map<std::string, std::string> * query_parts
    ) const override;

    virtual void ParseResponse( Response * response ) override;

    mf::http::SharedBuffer::Pointer GetPostData();

    mf::api::RequestMethod GetRequestMethod() const
    {
        return mf::api::RequestMethod::Post;
    }
};

Impl::Impl()
{
}

void Impl::BuildUrl(
            std::string * path,
            std::map<std::string, std::string> * query_parts
    ) const
{
    *path = api_path + ".php";
}

void Impl::ParseResponse( Response * response )
{
    // This function uses return defines for readability and maintainability.
#   define return_error(error_type, error_message)                             \
    {                                                                          \
        SetError(response, error_type, error_message);                         \
        return;                                                                \
    }

    // create_content_struct_parse TArray
    try {
        const boost::property_tree::wptree & branch =
            response->pt.get_child(L"response.web_uploads");
        response->web_uploads.reserve( response->pt.size() );

        for ( auto & it : branch )
        {
            Response::WebUpload optarg;
            if ( WebUploadFromPropertyBranch(
                    response, &optarg, it.second) )
                response->web_uploads.push_back(std::move(optarg));
            else
                return;  // error set already
        }
    }
    catch(boost::property_tree::ptree_bad_path & err)
    {
        // JSON response still has element if no files were returned.
        // This is really an error.
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.web_uploads\"");
    }

#   undef return_error
}

mf::http::SharedBuffer::Pointer Impl::GetPostData()
{
    std::map<std::string, std::string> parts;

    if (filter_)
        parts["all_web_uploads"] = AsString(*filter_);
    if (upload_key_)
        parts["upload_key"] = *upload_key_;

    std::string post_data = MakePost(api_path + ".php", parts);
    AddDebugText(" POST data: " + post_data + "\n");
    return mf::http::SharedBuffer::Create(post_data);
}

// Request ---------------------------------------------------------------------

Request::Request() :
    impl_(new Impl())
{
}

void Request::SetCallback( CallbackType callback_function )
{
    impl_->SetCallback(callback_function);
}

void Request::HandleContent(
        const std::string & url,
        const mf::http::Headers & headers,
        const std::string & content
    )
{
    impl_->HandleContent(url, headers, content);
}

void Request::HandleError(
        const std::string & url,
        std::error_code ec,
        const std::string & error_string
    )
{
    impl_->HandleError(url, ec, error_string);
}

std::string Request::Url(const std::string & hostname) const
{
    return impl_->Url(hostname);
}

void Request::SetSessionToken(
        std::string session_token,
        std::string time,
        int secret_key
    )
{
    impl_->SetSessionToken(session_token, time, secret_key);
}

void Request::SetFilter(Filter filter)
{
    impl_->filter_ = filter;
}

void Request::SetUploadKey(std::string upload_key)
{
    impl_->upload_key_ = upload_key;
}

mf::http::SharedBuffer::Pointer Request::GetPostData()
{
    return impl_->GetPostData();
}

}  // namespace v1_3
}  // namespace get_web_uploads
}  // namespace upload
}  // namespace api
}  // namespace mf
