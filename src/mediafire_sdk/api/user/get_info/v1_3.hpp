/**
 * @file api/user/get_info.hpp
 * @brief API request: /api/1.3/user/get_info
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
#pragma once

#include <string>
#include <vector>

#include "mediafire_sdk/http/shared_buffer.hpp"
#include "mediafire_sdk/http/headers.hpp"
#include "mediafire_sdk/api/response_base.hpp"

#include "boost/date_time/posix_time/ptime.hpp"

namespace mf {
namespace api {
/** API action path "user" */
namespace user {
/** API action "user/get_info" */
namespace get_info {
/** API path "/api/1.3/user/get_info" */
namespace v1_3 {

enum class Gender
{
    /** API value "unknown" */
    Unknown,
    /** API value "male" */
    Male,
    /** API value "female" */
    Female
};

enum class AccountType
{
    /** API value "no" */
    Basic,
    /** API value "yes" */
    Premium
};

enum class Validated
{
    /** API value "no" */
    NotValidated,
    /** API value "yes" */
    Validated
};

enum class LimitExceeded
{
    /** API value "no" */
    WithinBounds,
    /** API value "yes" */
    Exceeded
};

enum class Linked
{
    /** API value "no" */
    No,
    /** API value "yes" */
    Yes
};

/**
 * @class Response
 * @brief Response from API request "user/get_info"
 */
class Response : public ResponseBase
{
public:
    Response() :
        first_name(""),
        last_name(""),
        gender(Gender::Unknown),
        birth_date(boost::posix_time::not_a_date_time),
        created_datetime(boost::posix_time::not_a_date_time)
    {}
    struct Facebook
    {
        /** API response field "facebook_id" */
        boost::optional<std::string> id;

        /** API response field "date_created" */
        boost::optional<std::string> date_created;

        /** API response field "facebook_url" */
        boost::optional<std::string> url;

        /** API response field "name" */
        boost::optional<std::string> name;

        /** API response field "firstname" */
        boost::optional<std::string> firstname;

        /** API response field "lastname" */
        boost::optional<std::string> lastname;

        /** API response field "hometown" */
        boost::optional<std::string> hometown;

        /** API response field "location" */
        boost::optional<std::string> location;

        /** API response field "i18n" */
        boost::optional<std::string> i18n;

        /** API response field "timezone" */
        boost::optional<int32_t> timezone;

        /** API response field "linked" */
        boost::optional<Linked> linked;
    };
    struct Twitter
    {
        /** API response field "twitter_id" */
        boost::optional<std::string> id;

        /** API response field "date_created" */
        boost::optional<std::string> date_created;

        /** API response field "screen_name" */
        boost::optional<std::string> screen_name;

        /** API response field "name" */
        boost::optional<std::string> name;

        /** API response field "i18n" */
        boost::optional<std::string> i18n;

        /** API response field "linked" */
        boost::optional<Linked> linked;
    };
    struct Gmail
    {
        /** API response field "gmail_id" */
        boost::optional<std::string> id;

        /** API response field "created" */
        boost::optional<boost::posix_time::ptime> created;

        /** API response field "email" */
        boost::optional<std::string> email;

        /** API response field "gmail_url" */
        boost::optional<std::string> url;

        /** API response field "name" */
        boost::optional<std::string> name;

        /** API response field "firstname" */
        boost::optional<std::string> first_name;

        /** API response field "lastname" */
        boost::optional<std::string> last_name;

        /** API response field "i18n" */
        boost::optional<std::string> i18n;

        /** API response field "synced" */
        boost::optional<boost::posix_time::ptime> synced;

        /** API response field "linked" */
        boost::optional<Linked> linked;
    };
    /** API response field "response.user_info.ekey" */
    std::string ekey;

    /** API response field "response.user_info.email" */
    std::string email;

    /** API response field "response.user_info.first_name" */
    std::string first_name;

    /** API response field "response.user_info.last_name" */
    std::string last_name;

    /** API response field "response.user_info.display_name" */
    std::string display_name;

    /** API response field "response.user_info.gender" */
    Gender gender;

    /** API response field "response.user_info.birth_date" */
    boost::posix_time::ptime birth_date;

    /** API response field "response.user_info.location" */
    boost::optional<std::string> location;

    /** API response field "response.user_info.website" */
    boost::optional<std::string> website;

    /** API response field "response.user_info.premium" */
    AccountType account_type;

    /** API response field "response.user_info.bandwidth" */
    int64_t bandwidth;

    /** API response field "response.user_info.created" */
    boost::posix_time::ptime created_datetime;

    /** API response field "response.user_info.validated" */
    Validated validated;

    /** API response field "response.user_info.tos_accepted" */
    boost::optional<std::string> tos_accepted;

    /** API response field "response.user_info.used_storage_size" */
    uint64_t used_storage_size;

    /** API response field "response.user_info.base_storage" */
    uint64_t base_storage;

    /** API response field "response.user_info.bonus_storage" */
    uint64_t bonus_storage;

    /** API response field "response.user_info.storage_limit" */
    uint64_t storage_limit;

    /** API response field "response.user_info.storage_limit_exceeded" */
    LimitExceeded storage_limit_exceeded;

    /** API response field "response.user_info.options" */
    uint32_t options;

    /** API response field "response.user_info.facebook" */
    boost::optional<Facebook> facebook;

    /** API response field "response.user_info.twitter" */
    boost::optional<Twitter> twitter;

    /** API response field "response.user_info.gmail" */
    boost::optional<Gmail> gmail;
};

class Impl;

/**
 * @class Request
 * @brief Make API request "user/get_info"
 */
class Request
{
public:
    /**
     * API request "user/get_info"
     */
    Request();

    // Remaining functions are for use by API library only. --------------------

    /** Requester/SessionMaintainer expected type. */
    typedef Response ResponseType;

    /** Requester/SessionMaintainer expected type. */
    typedef std::function< void( const ResponseType & data)> CallbackType;

    /** Requester/SessionMaintainer expected type. */
    void SetCallback( CallbackType callback_function );

    /** Requester expected method. */
    void HandleContent(
            const std::string & url,
            const mf::http::Headers & headers,
            const std::string & content
        );

    /** Requester expected method. */
    void HandleError(
            const std::string & url,
            std::error_code ec,
            const std::string & error_string
        );

    /** Requester expected method. */
    std::string Url(const std::string & hostname) const;

    /** Requester optional method. */
    mf::http::SharedBuffer::Pointer GetPostData();

    /** SessionMaintainer expected method. */
    void SetSessionToken(
            std::string session_token,
            std::string time,
            int secret_key
        );
private:
    std::shared_ptr<Impl> impl_;
};
}  // namespace v1_3

}  // namespace get_info
}  // namespace user
}  // namespace api
}  // namespace mf
