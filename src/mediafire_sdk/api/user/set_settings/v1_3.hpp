/**
 * @file api/user/set_settings.hpp
 * @brief API request: /api/1.3/user/set_settings
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
#pragma once

#include <string>
#include <vector>

#include "mediafire_sdk/http/shared_buffer.hpp"
#include "mediafire_sdk/http/headers.hpp"
#include "mediafire_sdk/api/response_base.hpp"

#include "boost/date_time/posix_time/ptime.hpp"

namespace mf {
namespace api {
/** API action path "user" */
namespace user {
/** API action "user/set_settings" */
namespace set_settings {
/** API path "/api/1.3/user/set_settings" */
namespace v1_3 {

enum class ShareLinkStatus
{
    /** API value "disabled" */
    Disabled,
    /** API value "enabled" */
    Enabled,
    /** API value "inherit" */
    Inherit
};

enum class CollectMetadata
{
    /** API value "no" */
    No,
    /** API value "yes" */
    Yes
};

/**
 * @class Response
 * @brief Response from API request "user/set_settings"
 */
class Response : public ResponseBase
{
public:
};

class Impl;

/**
 * @class Request
 * @brief Make API request "user/set_settings"
 */
class Request
{
public:

    // Enums in class namespace for usage with templates
    using ShareLinkStatus = enum ShareLinkStatus;
    using CollectMetadata = enum CollectMetadata;

    /**
     * API request "user/set_settings"
     */
    Request();

    /**
     * Optional API parameter "previous_file_versions"
     *
     * @param previous_file_versions The number of older file versions to keep
     *                               for a file.
     */
    void SetPreviousFileVersions(uint32_t previous_file_versions);

    /**
     * Optional API parameter "default_share_link_status"
     *
     * @param default_share_link_status Specifies the initial share link status
     *                                  for a new file.
     */
    void SetDefaultShareLinkStatus(ShareLinkStatus default_share_link_status);

    /**
     * Optional API parameter "collect_metadata"
     *
     * @param collect_metadata Specifies whether metadata should be collected on
     *                         files uploaded to this user account.
     */
    void SetCollectMetadata(CollectMetadata collect_metadata);

    // Remaining functions are for use by API library only. --------------------

    /** Requester/SessionMaintainer expected type. */
    typedef Response ResponseType;

    /** Requester/SessionMaintainer expected type. */
    typedef std::function< void( const ResponseType & data)> CallbackType;

    /** Requester/SessionMaintainer expected type. */
    void SetCallback( CallbackType callback_function );

    /** Requester expected method. */
    void HandleContent(
            const std::string & url,
            const mf::http::Headers & headers,
            const std::string & content
        );

    /** Requester expected method. */
    void HandleError(
            const std::string & url,
            std::error_code ec,
            const std::string & error_string
        );

    /** Requester expected method. */
    std::string Url(const std::string & hostname) const;

    /** Requester optional method. */
    mf::http::SharedBuffer::Pointer GetPostData();

    /** SessionMaintainer expected method. */
    void SetSessionToken(
            std::string session_token,
            std::string time,
            int secret_key
        );
private:
    std::shared_ptr<Impl> impl_;
};
}  // namespace v1_3

}  // namespace set_settings
}  // namespace user
}  // namespace api
}  // namespace mf
