/**
 * @file api/user/set_avatar.hpp
 * @brief API request: /api/1.3/user/set_avatar
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
#pragma once

#include <string>
#include <vector>

#include "mediafire_sdk/http/shared_buffer.hpp"
#include "mediafire_sdk/http/headers.hpp"
#include "mediafire_sdk/api/response_base.hpp"

#include "boost/date_time/posix_time/ptime.hpp"

namespace mf {
namespace api {
/** API action path "user" */
namespace user {
/** API action "user/set_avatar" */
namespace set_avatar {
/** API path "/api/1.3/user/set_avatar" */
namespace v1_3 {

enum class Action
{
    /** API value "set_default" */
    SetDefault,
    /** API value "remove" */
    Remove
};

/**
 * @class Response
 * @brief Response from API request "user/set_avatar"
 */
class Response : public ResponseBase
{
public:
    /** The quickkey of the avatar. */
    boost::optional<std::string> quickkey;

    /** The revision of the cloud device if changed. */
    boost::optional<uint64_t> new_device_revision;
};

class Impl;

/**
 * @class Request
 * @brief Make API request "user/set_avatar"
 */
class Request
{
public:
    /**
     * API request "user/set_avatar"
     */
    Request();

    /**
     * Optional API parameter "action"
     *
     * @param action Type of change to make to the account avatar.  Required if
     *               quickkey or URL are not passed.
     */
    void SetAction(Action action);

    /**
     * Optional API parameter "quick_key"
     *
     * @param quickkey A file key of an image file existing in the session
     *                 user's account.  If action is passed this parameter is
     *                 ignored. Required if action or url are not passed.
     */
    void SetQuickkey(std::string quickkey);

    /**
     * Optional API parameter "url"
     *
     * @param url A URL to an image file.  If action or quick_key are passed
     *            this parameter is ignored.  Required if action or quick_key
     *            are not passed.
     */
    void SetUrl(std::string url);

    // Remaining functions are for use by API library only. --------------------

    /** Requester/SessionMaintainer expected type. */
    typedef Response ResponseType;

    /** Requester/SessionMaintainer expected type. */
    typedef std::function< void( const ResponseType & data)> CallbackType;

    /** Requester/SessionMaintainer expected type. */
    void SetCallback( CallbackType callback_function );

    /** Requester expected method. */
    void HandleContent(
            const std::string & url,
            const mf::http::Headers & headers,
            const std::string & content
        );

    /** Requester expected method. */
    void HandleError(
            const std::string & url,
            std::error_code ec,
            const std::string & error_string
        );

    /** Requester expected method. */
    std::string Url(const std::string & hostname) const;

    /** Requester optional method. */
    mf::http::SharedBuffer::Pointer GetPostData();

    /** SessionMaintainer expected method. */
    void SetSessionToken(
            std::string session_token,
            std::string time,
            int secret_key
        );
private:
    std::shared_ptr<Impl> impl_;
};
}  // namespace v1_3

}  // namespace set_avatar
}  // namespace user
}  // namespace api
}  // namespace mf
