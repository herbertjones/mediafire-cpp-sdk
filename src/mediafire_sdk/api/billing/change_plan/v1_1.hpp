/**
 * @file api/billing/change_plan.hpp
 * @brief API request: /api/1.1/billing/change_plan
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
#pragma once

#include <string>
#include <vector>

#include "mediafire_sdk/http/shared_buffer.hpp"
#include "mediafire_sdk/http/headers.hpp"
#include "mediafire_sdk/api/response_base.hpp"

#include "boost/date_time/posix_time/ptime.hpp"

namespace mf {
namespace api {
/** API action path "billing" */
namespace billing {
/** API action "billing/change_plan" */
namespace change_plan {
/** API path "/api/1.1/billing/change_plan" */
namespace v1_1 {

enum class InfoOnly
{
    /** API value "no" */
    No,
    /** API value "yes" */
    Yes
};

/**
 * @class Response
 * @brief Response from API request "billing/change_plan"
 */
class Response : public ResponseBase
{
public:
    /** API response field "response.nextbilling" */
    boost::optional<std::string> next_billing;

    /** API response field "response.info_only" */
    InfoOnly info_only;

    /** API response field "response.newpid" */
    uint32_t new_pid;

    /** API response field "response.amount" */
    std::string amount;

    /** API response field "response.interval" */
    uint32_t interval;
};

class Impl;

/**
 * @class Request
 * @brief Make API request "billing/change_plan"
 */
class Request
{
public:
    /**
     * API request "billing/change_plan"
     *
     * @param product_id API parameter "product_id"
     * @param info_only API parameter "info_only"
     */
    Request(
            uint32_t product_id,
            InfoOnly info_only
        );

    /**
     * Optional API parameter "subdomain"
     *
     * @param subdomain Set parameter "subdomain" in API request.
     */
    void SetSubdomain(std::string subdomain);

    /**
     * Optional API parameter "company"
     *
     * @param company Set parameter "company" in API request.
     */
    void SetCompany(std::string company);

    // Remaining functions are for use by API library only. --------------------

    /** Requester/SessionMaintainer expected type. */
    typedef Response ResponseType;

    /** Requester/SessionMaintainer expected type. */
    typedef std::function< void( const ResponseType & data)> CallbackType;

    /** Requester/SessionMaintainer expected type. */
    void SetCallback( CallbackType callback_function );

    /** Requester expected method. */
    void HandleContent(
            const std::string & url,
            const mf::http::Headers & headers,
            const std::string & content
        );

    /** Requester expected method. */
    void HandleError(
            const std::string & url,
            std::error_code ec,
            const std::string & error_string
        );

    /** Requester expected method. */
    std::string Url(const std::string & hostname) const;

    /** Requester optional method. */
    mf::http::SharedBuffer::Pointer GetPostData();

    /** SessionMaintainer expected method. */
    void SetSessionToken(
            std::string session_token,
            std::string time,
            int secret_key
        );

    // Enums in class namespace for usage with templates
    using InfoOnly = enum InfoOnly;

private:
    std::shared_ptr<Impl> impl_;
};
}  // namespace v1_1

}  // namespace change_plan
}  // namespace billing
}  // namespace api
}  // namespace mf
