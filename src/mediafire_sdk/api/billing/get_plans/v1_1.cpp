/**
 * @file get_plans.cpp
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
// #define OUTPUT_DEBUG
#include "v1_1.hpp"

#include <string>

#include "mediafire_sdk/api/error.hpp"
#include "mediafire_sdk/api/ptree_helpers.hpp"
#include "mediafire_sdk/utils/string.hpp"
#include "mediafire_sdk/api/tokenless_api_base.hpp"

#include "boost/property_tree/json_parser.hpp"

namespace v1_1 = mf::api::billing::get_plans::v1_1;


#include "mediafire_sdk/api/type_helpers.hpp"

namespace {
// get_data_type_struct_extractor begin
using namespace v1_1;  // NOLINT
bool PlanFromPropertyBranch(
        Response * response,
        Response::Plan * value,
        const boost::property_tree::wptree & pt
    )
{
#   define return_error(error_type, error_message)                             \
    {                                                                          \
        response->error_code = make_error_code( error_type );                  \
        response->error_string = error_message;                                \
        return false;                                                          \
    }
    using mf::api::GetIfExists;
    using mf::api::GetValueIfExists;
    if (pt.size() == 0)  // Stop if branch is empty
        return false;
    value->is_recurring = Recurring::NonRecurring;
    value->recurring_units = 0;
    value->frequency_text = "";
    value->product_class = 0;
    value->free_months = 0;
    value->base_storage = 0;

    // create_content_parse_single required
    if ( ! GetIfExists(
            pt,
            "product_id",
            &value->product_id ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"product_id\"");

    // create_content_parse_single required
    if ( ! GetIfExists(
            pt,
            "description",
            &value->description ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"description\"");

    // create_content_parse_single required
    if ( ! GetIfExists(
            pt,
            "short_description",
            &value->short_description ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"short_description\"");

    // create_content_parse_single required
    if ( ! GetIfExists(
            pt,
            "initial_amount",
            &value->initial_amount ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"initial_amount\"");

    // create_content_parse_single required
    if ( ! GetIfExists(
            pt,
            "initial_units",
            &value->initial_units ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"initial_units\"");

    {
        std::string optval;
        // create_content_enum_parse TSingle
        if ( GetIfExists(
                pt,
                "is_recurring",
                &optval) )
        {
            if ( optval == "0" )
                value->is_recurring = Recurring::NonRecurring;
            else if ( optval == "1" )
                value->is_recurring = Recurring::Recurring;
        }
    }

    // create_content_parse_single required
    if ( ! GetIfExists(
            pt,
            "recurring_amount",
            &value->recurring_amount ) )
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"recurring_amount\"");

    // create_content_parse_single optional with default
    GetIfExists(
            pt,
            "recurring_units",
            &value->recurring_units);

    // create_content_parse_single optional with default
    GetIfExists(
            pt,
            "frequency_text",
            &value->frequency_text);

    // create_content_parse_single optional with default
    GetIfExists(
            pt,
            "product_class",
            &value->product_class);

    // create_content_parse_single optional with default
    GetIfExists(
            pt,
            "free_months",
            &value->free_months);

    // create_content_parse_single optional with default
    GetIfExists(
            pt,
            "base_storage",
            &value->base_storage);

    // get_data_type_struct_extractor conclusion
    return true;
#   undef return_error
}
}  // namespace

namespace mf {
namespace api {
/** API action path "billing" */
namespace billing {
namespace get_plans {
namespace v1_1 {

const std::string api_path("/api/1.1/billing/get_plans");

// Impl ------------------------------------------------------------------------

class Impl : public TokenlessApiBase<Response>
{
public:
    Impl();

    boost::optional<uint32_t> product_id_;
    boost::optional<uint32_t> family_;
    virtual void BuildUrl(
        std::string * path,
        std::map<std::string, std::string> * query_parts
    ) const override;

    virtual void ParseResponse( Response * response ) override;

    mf::http::SharedBuffer::Pointer GetPostData();

    mf::api::RequestMethod GetRequestMethod() const
    {
        return mf::api::RequestMethod::Post;
    }
};

Impl::Impl()
{
}

void Impl::BuildUrl(
            std::string * path,
            std::map<std::string, std::string> * query_parts
    ) const
{
    *path = api_path + ".php";
}

void Impl::ParseResponse( Response * response )
{
    // This function uses return defines for readability and maintainability.
#   define return_error(error_type, error_message)                             \
    {                                                                          \
        SetError(response, error_type, error_message);                         \
        return;                                                                \
    }

    // create_content_struct_parse TArray
    try {
        const boost::property_tree::wptree & branch =
            response->pt.get_child(L"response.products");
        response->plans.reserve( response->pt.size() );

        for ( auto & it : branch )
        {
            Response::Plan optarg;
            if ( PlanFromPropertyBranch(
                    response, &optarg, it.second) )
                response->plans.push_back(std::move(optarg));
            else
                return;  // error set already
        }
    }
    catch(boost::property_tree::ptree_bad_path & err)
    {
        // JSON response still has element if no files were returned.
        // This is really an error.
        return_error(
            mf::api::api_code::ContentInvalidData,
            "missing \"response.products\"");
    }

#   undef return_error
}

mf::http::SharedBuffer::Pointer Impl::GetPostData()
{
    std::map<std::string, std::string> parts;

    if (product_id_)
        parts["product_id"] = AsString(*product_id_);
    if (family_)
        parts["family"] = AsString(*family_);

    std::string post_data = MakePost(api_path + ".php", parts);
    AddDebugText(" POST data: " + post_data + "\n");
    return mf::http::SharedBuffer::Create(post_data);
}

// Request ---------------------------------------------------------------------

Request::Request() :
    impl_(new Impl())
{
}

void Request::SetCallback( CallbackType callback_function )
{
    impl_->SetCallback(callback_function);
}

void Request::HandleContent(
        const std::string & url,
        const mf::http::Headers & headers,
        const std::string & content
    )
{
    impl_->HandleContent(url, headers, content);
}

void Request::HandleError(
        const std::string & url,
        std::error_code ec,
        const std::string & error_string
    )
{
    impl_->HandleError(url, ec, error_string);
}

std::string Request::Url(const std::string & hostname) const
{
    return impl_->Url(hostname);
}

void Request::SetProductId(uint32_t product_id)
{
    impl_->product_id_ = product_id;
}

void Request::SetFamily(uint32_t family)
{
    impl_->family_ = family;
}

mf::http::SharedBuffer::Pointer Request::GetPostData()
{
    return impl_->GetPostData();
}

}  // namespace v1_1
}  // namespace get_plans
}  // namespace billing
}  // namespace api
}  // namespace mf
