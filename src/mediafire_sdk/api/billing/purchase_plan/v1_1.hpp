/**
 * @file api/billing/purchase_plan.hpp
 * @brief API request: /api/1.1/billing/purchase_plan
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
#pragma once

#include <string>
#include <vector>

#include "mediafire_sdk/http/shared_buffer.hpp"
#include "mediafire_sdk/http/headers.hpp"
#include "mediafire_sdk/api/response_base.hpp"

#include "boost/date_time/posix_time/ptime.hpp"

namespace mf {
namespace api {
/** API action path "billing" */
namespace billing {
/** API action "billing/purchase_plan" */
namespace purchase_plan {
/** API path "/api/1.1/billing/purchase_plan" */
namespace v1_1 {

enum class PaymentMethod
{
    /** API value "newcredit" */
    NewCredit,
    /** API value "prevcredit" */
    PreviousCredit
};

enum class KeepCard
{
    /** API value "0" */
    DiscardCard,
    /** API value "1" */
    KeepCard
};

/**
 * @class Response
 * @brief Response from API request "billing/purchase_plan"
 */
class Response : public ResponseBase
{
public:
    Response() :
        created_datetime(boost::posix_time::not_a_date_time),
        previous_invoice_datetime(boost::posix_time::not_a_date_time)
    {}
    /** API response field "response.invoice" */
    uint64_t invoice;

    /** API response field "created" */
    boost::posix_time::ptime created_datetime;

    /** API response field "response.total" */
    std::string total;

    /** API response field "response.product" */
    uint32_t product_id;

    /** API response field "response.premium" */
    uint32_t premium;

    /** API response field "lastpremium" */
    boost::posix_time::ptime previous_invoice_datetime;
};

class Impl;

/**
 * @class Request
 * @brief Make API request "billing/purchase_plan"
 */
class Request
{
public:

    // Enums in class namespace for usage with templates
    using PaymentMethod = enum PaymentMethod;
    using KeepCard = enum KeepCard;

    /**
     * API request "billing/purchase_plan"
     */
    Request();

    /**
     * Optional API parameter "pid"
     *
     * @param product_id Set parameter "pid" in API request.
     */
    void SetProductId(uint32_t product_id);

    /**
     * Optional API parameter "payment_method"
     *
     * @param payment_method Set parameter "payment_method" in API request.
     */
    void SetPaymentMethod(PaymentMethod payment_method);

    /**
     * Optional API parameter "first_name_info"
     *
     * @param first_name_info Set parameter "first_name_info" in API request.
     */
    void SetFirstNameInfo(std::string first_name_info);

    /**
     * Optional API parameter "last_name_info"
     *
     * @param last_name_info Set parameter "last_name_info" in API request.
     */
    void SetLastNameInfo(std::string last_name_info);

    /**
     * Optional API parameter "address1_info"
     *
     * @param address1_info Set parameter "address1_info" in API request.
     */
    void SetAddress1Info(std::string address1_info);

    /**
     * Optional API parameter "city_info"
     *
     * @param city_info Set parameter "city_info" in API request.
     */
    void SetCityInfo(std::string city_info);

    /**
     * Optional API parameter "zip_info"
     *
     * @param zip_info Set parameter "zip_info" in API request.
     */
    void SetZipInfo(std::string zip_info);

    /**
     * Optional API parameter "state_info"
     *
     * @param state_info Set parameter "state_info" in API request.
     */
    void SetStateInfo(std::string state_info);

    /**
     * Optional API parameter "country_info"
     *
     * @param country_info Set parameter "country_info" in API request.
     */
    void SetCountryInfo(std::string country_info);

    /**
     * Optional API parameter "region_info"
     *
     * @param region_info Set parameter "region_info" in API request.
     */
    void SetRegionInfo(std::string region_info);

    /**
     * Optional API parameter "postal_code_info"
     *
     * @param postal_code_info Set parameter "postal_code_info" in API request.
     */
    void SetPostalCodeInfo(std::string postal_code_info);

    /**
     * Optional API parameter "card_number"
     *
     * @param card_number Set parameter "card_number" in API request.
     */
    void SetCardNumber(std::string card_number);

    /**
     * Optional API parameter "card_code"
     *
     * @param card_code Set parameter "card_code" in API request.
     */
    void SetCardCode(std::string card_code);

    /**
     * Optional API parameter "exp_month"
     *
     * @param exp_month Set parameter "exp_month" in API request.
     */
    void SetExpMonth(std::string exp_month);

    /**
     * Optional API parameter "exp_year"
     *
     * @param exp_year Set parameter "exp_year" in API request.
     */
    void SetExpYear(std::string exp_year);

    /**
     * Optional API parameter "keep_card"
     *
     * @param keep_card Set parameter "keep_card" in API request.
     */
    void SetKeepCard(KeepCard keep_card);

    /**
     * Optional API parameter "prev_card_code"
     *
     * @param prev_card_code Set parameter "prev_card_code" in API request.
     */
    void SetPrevCardCode(std::string prev_card_code);

    /**
     * Optional API parameter "subdomain"
     *
     * @param subdomain Set parameter "subdomain" in API request.
     */
    void SetSubdomain(std::string subdomain);

    /**
     * Optional API parameter "company"
     *
     * @param company Set parameter "company" in API request.
     */
    void SetCompany(std::string company);

    // Remaining functions are for use by API library only. --------------------

    /** Requester/SessionMaintainer expected type. */
    typedef Response ResponseType;

    /** Requester/SessionMaintainer expected type. */
    typedef std::function< void( const ResponseType & data)> CallbackType;

    /** Requester/SessionMaintainer expected type. */
    void SetCallback( CallbackType callback_function );

    /** Requester expected method. */
    void HandleContent(
            const std::string & url,
            const mf::http::Headers & headers,
            const std::string & content
        );

    /** Requester expected method. */
    void HandleError(
            const std::string & url,
            std::error_code ec,
            const std::string & error_string
        );

    /** Requester expected method. */
    std::string Url(const std::string & hostname) const;

    /** Requester optional method. */
    mf::http::SharedBuffer::Pointer GetPostData();

    /** SessionMaintainer expected method. */
    void SetSessionToken(
            std::string session_token,
            std::string time,
            int secret_key
        );
private:
    std::shared_ptr<Impl> impl_;
};
}  // namespace v1_1

}  // namespace purchase_plan
}  // namespace billing
}  // namespace api
}  // namespace mf
