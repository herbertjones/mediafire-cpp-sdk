/**
 * @file __HPP_RELATIVE_FILENAME__
 * @brief API request: __API_PATH__
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
#pragma once

__ADDITIONAL_HPP_SYSTEM_INCLUDES__#include <string>
#include <vector>

__ADDITIONAL_HPP_LOCAL_INCLUDES__#include "mediafire_sdk/http/headers.hpp"
#include "mediafire_sdk/api/response_base.hpp"

#include "boost/date_time/posix_time/ptime.hpp"

namespace mf {
__NAMESPACE_BEGIN__
/** __NAMESPACE_DOCUMENTATION__ */
namespace __CPPSAFE_NAME__ {
/** __VERSION_DOCUMENTATION__ */
namespace __VERSION__ {
__ENUMS__
/**
 * @class Response
 * @brief Response from API request "__API_ACTION_PATH__"
 */
class Response : public ResponseBase
{
public:
__DATA_TYPE_CTOR____DATA_TYPE_STRUCTS____DATA_TYPES__};

class Impl;

/**
 * @class Request
 * @brief Make API request "__API_ACTION_PATH__"
 */
class Request
{
public:
__HPP_CTORS__

__HPP_OPTIONAL_SETTERS__    // Remaining functions are for use by API library only. --------------------

    /** Requester/SessionMaintainer expected type. */
    typedef Response ResponseType;

    /** Requester/SessionMaintainer expected type. */
    typedef std::function< void( const ResponseType & data)> CallbackType;

    /** Requester/SessionMaintainer expected type. */
    void SetCallback( CallbackType callback_function );

    /** Requester expected method. */
    void HandleContent(
            const std::string & url,
            const mf::http::Headers & headers,
            const std::string & content
        );

    /** Requester expected method. */
    void HandleError(
            const std::string & url,
            std::error_code ec,
            const std::string & error_string
        );

    /** Requester expected method. */
    std::string Url(const std::string & hostname) const;

__HPP_POST_DATA_TEMPLATE____HPP_SESSION_TOKEN_TEMPLATE__private:
    std::shared_ptr<Impl> impl_;
};
}  // namespace __VERSION__

}  // namespace __CPPSAFE_NAME__
__NAMESPACE_END__
}  // namespace mf
