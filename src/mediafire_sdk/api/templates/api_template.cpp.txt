/**
 * @file __CPP_FILENAME__
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
// #define OUTPUT_DEBUG
#include "__HPP_FILENAME__"

__ADDITIONAL_CPP_SYSTEM_INCLUDES__#include <string>

__ADDITIONAL_CPP_LOCAL_INCLUDES__#include "mediafire_sdk/api/error.hpp"
#include "mediafire_sdk/api/ptree_helpers.hpp"
#include "mediafire_sdk/utils/string.hpp"
#include "__API_REQUEST_BASE_HEADER__"

#include "boost/property_tree/json_parser.hpp"

namespace __VERSION__ = mf::__NAMESPACE__::__CPPSAFE_NAME__::__VERSION__;

__AS_STRING_FUNCS__
#include "mediafire_sdk/api/type_helpers.hpp"
__DATA_TYPE_STRUCT_EXTRACTORS__
namespace mf {
__NAMESPACE_BEGIN__
namespace __CPPSAFE_NAME__ {
namespace __VERSION__ {

const std::string api_path("__API_PATH__");

// Impl ------------------------------------------------------------------------

class Impl : public __API_REQUEST_BASE__
{
public:
__IMPL_CTOR_DECLARATIONS__

__CLASS_MEMBER_VARS__    virtual void BuildUrl(
        std::string * path,
        std::map<std::string, std::string> * query_parts
    ) const override;

    virtual void ParseResponse( Response * __PR_OPT_ADT__ ) override;
__CPP_POST_DATA_IMPL_DECL__};

__IMPL_CTOR_DEFINITIONS__
void Impl::BuildUrl(
            std::string * path,
            std::map<std::string, std::string> * __QUERY_PARTS_ARG__
    ) const
{
    *path = api_path + ".php";__URL_CREATION__
}

void Impl::ParseResponse( Response * __PR_OPT_ADT__ )
{
    // This function uses return defines for readability and maintainability.
#   define return_error(error_type, error_message)                             \
    {                                                                          \
        SetError(response, error_type, error_message);                         \
        return;                                                                \
    }
__CONTENT_PARSING__

#   undef return_error
}

__CPP_POST_DATA_IMPL_DEF__// Request ---------------------------------------------------------------------

__CPP_CTORS__
void Request::SetCallback( CallbackType callback_function )
{
    impl_->SetCallback(callback_function);
}

void Request::HandleContent(
        const std::string & url,
        const mf::http::Headers & headers,
        const std::string & content
    )
{
    impl_->HandleContent(url, headers, content);
}

void Request::HandleError(
        const std::string & url,
        std::error_code ec,
        const std::string & error_string
    )
{
    impl_->HandleError(url, ec, error_string);
}

std::string Request::Url(const std::string & hostname) const
{
    return impl_->Url(hostname);
}

__CPP_SESSION_TOKEN_TEMPLATE____CPP_OPTIONAL_SETTERS____CPP_POST_DATA_TEMPLATE__}  // namespace __VERSION__
}  // namespace __CPPSAFE_NAME__
__NAMESPACE_END__
}  // namespace mf
