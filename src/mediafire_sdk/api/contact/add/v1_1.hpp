/**
 * @file api/contact/add.hpp
 * @brief API request: /api/1.1/contact/add
 *
 * @copyright Copyright 2014 Mediafire
 *
 * This file was generated by gen_api_template.py. Do NOT edit by hand.
 */
#pragma once

#include <string>
#include <vector>

#include "mediafire_sdk/http/shared_buffer.hpp"
#include "mediafire_sdk/http/headers.hpp"
#include "mediafire_sdk/api/response_base.hpp"

#include "boost/date_time/posix_time/ptime.hpp"

namespace mf {
namespace api {
/** API action path "contact" */
namespace contact {
/** API action "contact/add" */
namespace add {
/** API path "/api/1.1/contact/add" */
namespace v1_1 {

enum class ContactType
{
    /** API value "mediafire" */
    MediaFire,
    /** API value "facebook" */
    FaceBook,
    /** API value "gmail" */
    GMail,
    /** API value "twitter" */
    Twitter
};

enum class Gender
{
    /** API value "male" */
    Male,
    /** API value "female" */
    Female,
    /** API value "none" */
    None
};

/**
 * @class Response
 * @brief Response from API request "contact/add"
 */
class Response : public ResponseBase
{
public:
};

class Impl;

/**
 * @class Request
 * @brief Make API request "contact/add"
 */
class Request
{
public:
    /**
     * API request "contact/add"
     */
    Request();

    /**
     * Optional API parameter "contact_type"
     *
     * @param contact_type Set parameter "contact_type" in API request.
     */
    void SetContactType(ContactType contact_type);

    /**
     * Optional API parameter "contact_key"
     *
     * @param contact_key Set parameter "contact_key" in API request.
     */
    void SetContactKey(std::string contact_key);

    /**
     * Optional API parameter "display_name"
     *
     * @param display_name Set parameter "display_name" in API request.
     */
    void SetDisplayName(std::string display_name);

    /**
     * Optional API parameter "first_name"
     *
     * @param first_name Set parameter "first_name" in API request.
     */
    void SetFirstName(std::string first_name);

    /**
     * Optional API parameter "last_name"
     *
     * @param last_name Set parameter "last_name" in API request.
     */
    void SetLastName(std::string last_name);

    /**
     * Optional API parameter "avatar"
     *
     * @param avatar_url Set parameter "avatar" in API request.
     */
    void SetAvatarUrl(std::string avatar_url);

    /**
     * Optional API parameter "source_uid"
     *
     * @param source_user_id Set parameter "source_uid" in API request.
     */
    void SetSourceUserId(std::string source_user_id);

    /**
     * Optional API parameter "email"
     *
     * @param email Set parameter "email" in API request.
     */
    void SetEmail(std::string email);

    /**
     * Optional API parameter "phone"
     *
     * @param phone_number Set parameter "phone" in API request.
     */
    void SetPhoneNumber(std::string phone_number);

    /**
     * Optional API parameter "birthdate"
     *
     * @param birthdate Set parameter "birthdate" in API request.
     */
    void SetBirthdate(std::string birthdate);

    /**
     * Optional API parameter "location"
     *
     * @param location Set parameter "location" in API request.
     */
    void SetLocation(std::string location);

    /**
     * Optional API parameter "gender"
     *
     * @param gender Set parameter "gender" in API request.
     */
    void SetGender(Gender gender);

    /**
     * Optional API parameter "website"
     *
     * @param website Set parameter "website" in API request.
     */
    void SetWebsite(std::string website);

    /**
     * Optional API parameter "group_id"
     *
     * @param group_id Set parameter "group_id" in API request.
     */
    void SetGroupId(std::string group_id);

    // Remaining functions are for use by API library only. --------------------

    /** Requester/SessionMaintainer expected type. */
    typedef Response ResponseType;

    /** Requester/SessionMaintainer expected type. */
    typedef std::function< void( const ResponseType & data)> CallbackType;

    /** Requester/SessionMaintainer expected type. */
    void SetCallback( CallbackType callback_function );

    /** Requester expected method. */
    void HandleContent(
            const std::string & url,
            const mf::http::Headers & headers,
            const std::string & content
        );

    /** Requester expected method. */
    void HandleError(
            const std::string & url,
            std::error_code ec,
            const std::string & error_string
        );

    /** Requester expected method. */
    std::string Url(const std::string & hostname) const;

    /** Requester optional method. */
    mf::http::SharedBuffer::Pointer GetPostData();

    /** SessionMaintainer expected method. */
    void SetSessionToken(
            std::string session_token,
            std::string time,
            int secret_key
        );

    // Enums in class namespace for usage with templates
    using ContactType = enum ContactType;
    using Gender = enum Gender;

private:
    std::shared_ptr<Impl> impl_;
};
}  // namespace v1_1

}  // namespace add
}  // namespace contact
}  // namespace api
}  // namespace mf
